
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 22:58:35 CST 2018
//----------------------------------------------------

package Gramaticas.CSS;

import Errores.ER;
import Errores.ListaErrores;
import EDD.CSJ.*;
import java.io.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 22:58:35 CST 2018
  */
public class SintacticoCCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCCSS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\027" +
    "\004\000\002\027\003\000\002\003\006\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\004\006" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\005\006\000\002\006\006\000\002" +
    "\022\005\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\007\006\000\002\010\006\000\002\011\006\000" +
    "\002\012\012\000\002\025\003\000\002\025\003\000\002" +
    "\013\006\000\002\014\014\000\002\015\006\000\002\016" +
    "\006\000\002\017\006\000\002\020\006\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\050\005\001\002\000\006\002\ufffe\050" +
    "\ufffe\001\002\000\004\031\012\001\002\000\006\002\000" +
    "\050\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\050\uffff\001\002\000\034" +
    "\004\035\005\015\013\041\014\033\015\027\016\023\017" +
    "\031\020\014\021\045\022\030\023\036\024\013\053\025" +
    "\001\002\000\004\043\233\001\002\000\004\037\230\001" +
    "\002\000\004\037\225\001\002\000\004\041\224\001\002" +
    "\000\004\041\223\001\002\000\004\041\222\001\002\000" +
    "\004\041\221\001\002\000\036\004\035\005\015\013\041" +
    "\014\033\015\027\016\023\017\031\020\014\021\045\022" +
    "\030\023\036\024\013\032\176\053\025\001\002\000\004" +
    "\037\163\001\002\000\004\041\162\001\002\000\004\037" +
    "\153\001\002\000\004\041\152\001\002\000\004\037\147" +
    "\001\002\000\004\037\144\001\002\000\004\037\133\001" +
    "\002\000\004\041\132\001\002\000\004\037\127\001\002" +
    "\000\004\041\126\001\002\000\004\043\123\001\002\000" +
    "\004\037\120\001\002\000\004\041\117\001\002\000\004" +
    "\041\116\001\002\000\004\037\103\001\002\000\004\041" +
    "\102\001\002\000\004\041\101\001\002\000\004\041\100" +
    "\001\002\000\004\037\046\001\002\000\004\040\047\001" +
    "\002\000\004\031\050\001\002\000\020\043\060\045\051" +
    "\046\056\047\055\050\054\051\053\052\052\001\002\000" +
    "\022\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2" +
    "\042\uffc2\044\uffc2\001\002\000\022\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\044\uffbf\001\002" +
    "\000\022\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041" +
    "\uffc0\042\uffc0\044\uffc0\001\002\000\022\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\044\uffc4\001" +
    "\002\000\022\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\041\uffc3\042\uffc3\044\uffc3\001\002\000\022\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\044\uffc1" +
    "\001\002\000\014\033\064\034\063\035\062\036\066\042" +
    "\073\001\002\000\020\043\060\045\051\046\056\047\055" +
    "\050\054\051\053\052\052\001\002\000\014\033\064\034" +
    "\063\035\062\036\066\044\065\001\002\000\020\043\060" +
    "\045\051\046\056\047\055\050\054\051\053\052\052\001" +
    "\002\000\020\043\060\045\051\046\056\047\055\050\054" +
    "\051\053\052\052\001\002\000\020\043\060\045\051\046" +
    "\056\047\055\050\054\051\053\052\052\001\002\000\022" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\042" +
    "\uffbe\044\uffbe\001\002\000\020\043\060\045\051\046\056" +
    "\047\055\050\054\051\053\052\052\001\002\000\022\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\041\uffc6\042\uffc6" +
    "\044\uffc6\001\002\000\022\032\uffc7\033\uffc7\034\uffc7\035" +
    "\062\036\066\041\uffc7\042\uffc7\044\uffc7\001\002\000\022" +
    "\032\uffc8\033\uffc8\034\uffc8\035\062\036\066\041\uffc8\042" +
    "\uffc8\044\uffc8\001\002\000\022\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\041\uffc5\042\uffc5\044\uffc5\001\002\000" +
    "\020\043\060\045\051\046\056\047\055\050\054\051\053" +
    "\052\052\001\002\000\014\033\064\034\063\035\062\036" +
    "\066\042\075\001\002\000\020\043\060\045\051\046\056" +
    "\047\055\050\054\051\053\052\052\001\002\000\014\032" +
    "\077\033\064\034\063\035\062\036\066\001\002\000\004" +
    "\041\uffcd\001\002\000\036\004\uffe9\005\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\032\uffe9\053\uffe9\001\002\000\036\004" +
    "\uffe6\005\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\032\uffe6\053" +
    "\uffe6\001\002\000\036\004\uffeb\005\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\032\uffeb\053\uffeb\001\002\000\004\040\104" +
    "\001\002\000\014\006\112\007\110\010\105\011\113\012" +
    "\111\001\002\000\006\041\uffd7\042\uffd7\001\002\000\006" +
    "\041\uffda\042\uffda\001\002\000\006\041\uffdc\042\114\001" +
    "\002\000\006\041\uffd8\042\uffd8\001\002\000\006\041\uffd5" +
    "\042\uffd5\001\002\000\006\041\uffd9\042\uffd9\001\002\000" +
    "\006\041\uffd6\042\uffd6\001\002\000\014\006\112\007\110" +
    "\010\105\011\113\012\111\001\002\000\006\041\uffdb\042" +
    "\uffdb\001\002\000\036\004\uffe8\005\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\032\uffe8\053\uffe8\001\002\000\036\004\uffee" +
    "\005\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\032\uffee\053\uffee" +
    "\001\002\000\004\040\121\001\002\000\020\043\060\045" +
    "\051\046\056\047\055\050\054\051\053\052\052\001\002" +
    "\000\014\033\064\034\063\035\062\036\066\041\uffcb\001" +
    "\002\000\004\050\124\001\002\000\004\044\125\001\002" +
    "\000\004\041\uffc9\001\002\000\036\004\uffef\005\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\032\uffef\053\uffef\001\002\000" +
    "\004\040\130\001\002\000\020\043\060\045\051\046\056" +
    "\047\055\050\054\051\053\052\052\001\002\000\014\033" +
    "\064\034\063\035\062\036\066\041\uffd4\001\002\000\036" +
    "\004\uffe7\005\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\032\uffe7" +
    "\053\uffe7\001\002\000\004\040\134\001\002\000\004\031" +
    "\135\001\002\000\020\043\060\045\051\046\056\047\055" +
    "\050\054\051\053\052\052\001\002\000\014\033\064\034" +
    "\063\035\062\036\066\042\137\001\002\000\006\054\142" +
    "\055\140\001\002\000\004\032\uffcf\001\002\000\004\032" +
    "\143\001\002\000\004\032\uffd0\001\002\000\004\041\uffd1" +
    "\001\002\000\004\040\145\001\002\000\020\043\060\045" +
    "\051\046\056\047\055\050\054\051\053\052\052\001\002" +
    "\000\014\033\064\034\063\035\062\036\066\041\uffcc\001" +
    "\002\000\004\040\150\001\002\000\020\043\060\045\051" +
    "\046\056\047\055\050\054\051\053\052\052\001\002\000" +
    "\014\033\064\034\063\035\062\036\066\041\uffd3\001\002" +
    "\000\036\004\uffed\005\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\032\uffed\053\uffed\001\002\000\004\040\154\001\002\000" +
    "\012\025\161\026\156\027\157\030\155\001\002\000\004" +
    "\041\uffde\001\002\000\004\041\uffe0\001\002\000\004\041" +
    "\uffdf\001\002\000\004\041\uffe2\001\002\000\004\041\uffe1" +
    "\001\002\000\036\004\uffea\005\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\032\uffea\053\uffea\001\002\000\004\040\164\001" +
    "\002\000\020\043\060\045\051\046\056\047\055\050\054" +
    "\051\053\052\052\001\002\000\014\033\064\034\063\035" +
    "\062\036\066\041\uffd2\001\002\000\004\041\220\001\002" +
    "\000\004\041\217\001\002\000\004\041\216\001\002\000" +
    "\004\041\215\001\002\000\004\041\214\001\002\000\004" +
    "\041\213\001\002\000\004\041\212\001\002\000\004\041" +
    "\211\001\002\000\006\002\ufffd\050\ufffd\001\002\000\004" +
    "\041\210\001\002\000\004\041\207\001\002\000\004\041" +
    "\206\001\002\000\004\041\205\001\002\000\004\041\204" +
    "\001\002\000\036\004\ufff6\005\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\032\ufff6\053\ufff6\001\002\000\036\004\ufff3\005" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\032\ufff3\053\ufff3\001" +
    "\002\000\036\004\ufff8\005\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\032\ufff8\053\ufff8\001\002\000\036\004\ufff5\005\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\032\ufff5\053\ufff5\001\002" +
    "\000\036\004\ufffb\005\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\032\ufffb\053\ufffb\001\002\000\036\004\ufffc\005\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\032\ufffc\053\ufffc\001\002\000" +
    "\036\004\ufff4\005\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\032" +
    "\ufff4\053\ufff4\001\002\000\036\004\ufffa\005\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\032\ufffa\053\ufffa\001\002\000\036" +
    "\004\ufff7\005\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\032\ufff7" +
    "\053\ufff7\001\002\000\036\004\ufff2\005\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\032\ufff2\053\ufff2\001\002\000\036\004" +
    "\ufff0\005\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\032\ufff0\053" +
    "\ufff0\001\002\000\036\004\ufff1\005\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\032\ufff1\053\ufff1\001\002\000\036\004\ufff9" +
    "\005\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\032\ufff9\053\ufff9" +
    "\001\002\000\036\004\uffe5\005\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\032\uffe5\053\uffe5\001\002\000\036\004\uffe3\005" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\032\uffe3\053\uffe3\001" +
    "\002\000\036\004\uffe4\005\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\032\uffe4\053\uffe4\001\002\000\036\004\uffec\005\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\032\uffec\053\uffec\001\002" +
    "\000\004\040\226\001\002\000\020\043\060\045\051\046" +
    "\056\047\055\050\054\051\053\052\052\001\002\000\014" +
    "\033\064\034\063\035\062\036\066\041\uffdd\001\002\000" +
    "\004\040\231\001\002\000\020\043\060\045\051\046\056" +
    "\047\055\050\054\051\053\052\052\001\002\000\014\033" +
    "\064\034\063\035\062\036\066\041\uffce\001\002\000\004" +
    "\050\234\001\002\000\004\044\235\001\002\000\004\041" +
    "\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\002\006\003\003\027\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\033\005\036\006\025\007\015\010\041\011\023" +
    "\012\043\013\037\014\031\015\042\016\020\017\016\020" +
    "\017\024\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\174\005\176" +
    "\006\172\007\165\010\200\011\171\012\202\013\177\014" +
    "\173\015\201\016\170\017\166\020\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\060\001\001\000\002\001\001\000\004\026\071" +
    "\001\001\000\004\026\070\001\001\000\004\026\067\001" +
    "\001\000\002\001\001\000\004\026\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\073\001\001\000\002\001\001\000\004" +
    "\026\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\106\023\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\135\001" +
    "\001\000\002\001\001\000\004\025\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
ListaErrores errores = ListaErrores.getListaerror();
/*public String resultado="";
public Hashtable<String,Simbolo> simbolos = new Hashtable<String,Simbolo>();
//public Hashtable<String,Simbolo_Ejemplo> simbolos;*/

public ArbolCSJ arbol = new ArbolCSJ();
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        errores.agregarerror(new ER((s.right+1),s.left, (String) s.value, 2, "Valor no conocido"));
}
             

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+"  Identificador " + s.value + " no reconocido.");
        errores.agregarerror(new ER((s.right+1),s.left, (String) s.value, 2, "Valor no conocido"));
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCCSS$actions {
  private final SintacticoCCSS parser;

  /** Constructor */
  CUP$SintacticoCCSS$actions(SintacticoCCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCCSS$do_action(
    int                        CUP$SintacticoCCSS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCCSS$parser,
    java.util.Stack            CUP$SintacticoCCSS$stack,
    int                        CUP$SintacticoCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCCSS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= aparen E cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
		RESULT=a;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		nodo s =new nodo("decimal", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		nodo s =new nodo("cadena", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		nodo s =new nodo("false", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
    
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
				
		nodo s =new nodo("true", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		nodo s =new nodo("num", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		nodo s =new nodo("iden", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
    
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E por E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("*",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E div E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("/",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("-",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("+",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IDEDITADO ::= rid aparen iden cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("id_refererenciado",aleft,aright,false,null);
			hijos.add(new nodo(a.toString(),aleft,aright,false,null));
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("IDEDITADO",14, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // GRUPOEDITADO ::= rgrupo aparen iden cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("grupo_refererenciado",aleft,aright,false,null);
			hijos.add(new nodo(a.toString(),aleft,aright,false,null));
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("GRUPOEDITADO",13, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COLORTEXT ::= rcolortext dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("colottext",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("COLORTEXT",12, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPAQUE ::= ropaque dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("opaco",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("OPAQUE",11, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BORDE ::= rborde dpuntos igual acorche E coma E coma E ccorche 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("borde",aleft,aright,false,null);
			hijos.add((nodo)a);
			hijos.add((nodo)b);
			hijos.add((nodo)c);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("BORDE",10, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VISIBLE ::= rvisible dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("visible",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("VISIBLE",9, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPODIMENSION ::= rvertical 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("vertical",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPODIMENSION",19, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPODIMENSION ::= rhorizontal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("horizontal",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPODIMENSION",19, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AUTOREDIMENSION ::= rautore dpuntos igual acorche E coma TIPODIMENSION ccorche 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("autoredimension",aleft,aright,false,null);
			hijos.add((nodo)a);
			hijos.add((nodo)b);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("AUTOREDIMENSION",8, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FONDOELEMENTO ::= rfondoele dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("fondoelemento",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FONDOELEMENTO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TAMTEX ::= rtamtex dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("tamtex",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TAMTEX",6, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LETRA ::= rletra dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("letra",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LETRA",5, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOFORMATO ::= rcapital 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("capital",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOFORMATO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOFORMATO ::= rminuscula 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("minuscula",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOFORMATO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOFORMATO ::= rmayuscula 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("mayuscula",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOFORMATO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOFORMATO ::= rcursiva 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("cursiva",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOFORMATO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOFORMATO ::= rnegrilla 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("negrilla",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOFORMATO",17, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LFORMATO ::= TIPOFORMATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LFORMATO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LFORMATO ::= LFORMATO coma TIPOFORMATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LFORMATO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FORMATO ::= rformato dpuntos igual LFORMATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
				nodo s = new nodo("formato",aleft,aright,false,null);
				s.setHijos((ArrayList<nodo>)a);
				RESULT = s;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("FORMATO",4, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TEXTO ::= rtexto dpuntos igual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo s = new nodo("texto",aleft,aright,false,null);
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TEXTO",3, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOALINEADO ::= rjustificado 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("justificado",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOALINEADO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOALINEADO ::= rcentrado 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("centrado",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOALINEADO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOALINEADO ::= rderecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("derecha",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOALINEADO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPOALINEADO ::= rizquierda 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		RESULT = new nodo("izquierda",aleft,aright,false,null);
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("TIPOALINEADO",15, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ALINEADO ::= ralineado dpuntos igual TIPOALINEADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("alineado",aleft,aright,false,null);
				hijos.add((nodo)a);
				s.setHijos(hijos);
				RESULT=s;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ALINEADO",2, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LCUERPO ::= IDEDITADO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LCUERPO ::= GRUPOEDITADO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCUERPO ::= COLORTEXT pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCUERPO ::= OPAQUE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCUERPO ::= BORDE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LCUERPO ::= VISIBLE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LCUERPO ::= AUTOREDIMENSION pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LCUERPO ::= FONDOELEMENTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LCUERPO ::= TAMTEX pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LCUERPO ::= LETRA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LCUERPO ::= FORMATO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LCUERPO ::= TEXTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LCUERPO ::= ALINEADO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);	
				RESULT=hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LCUERPO ::= LCUERPO IDEDITADO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LCUERPO ::= LCUERPO GRUPOEDITADO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LCUERPO ::= LCUERPO COLORTEXT pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LCUERPO ::= LCUERPO OPAQUE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LCUERPO ::= LCUERPO BORDE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LCUERPO ::= LCUERPO VISIBLE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LCUERPO ::= LCUERPO AUTOREDIMENSION pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LCUERPO ::= LCUERPO FONDOELEMENTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LCUERPO ::= LCUERPO TAMTEX pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LCUERPO ::= LCUERPO LETRA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LCUERPO ::= LCUERPO FORMATO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LCUERPO ::= LCUERPO TEXTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LCUERPO ::= LCUERPO ALINEADO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT = hijos;
			
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("LCUERPO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ID ::= iden acorche LCUERPO ccorche 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		
		nodo s = new nodo("ID",aleft,aright,false,null);
		nodo s1 = new nodo("propiedades",bleft,bright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		s1.setHijos((ArrayList<nodo>)b);
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		hijos.add(s1);
		s.setHijos(hijos);
		RESULT=s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("ID",1, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		RESULT=hijos;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("S",21, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		ArrayList<nodo> hijos = (ArrayList<nodo>)a;
		hijos.add((nodo)b);
		RESULT=hijos;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("S",21, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= S 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.peek()).value;
		
		nodo s = parser.arbol.getRaiz();
		s.setHijos((ArrayList<nodo>)a);
		RESULT= s;
	
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.elementAt(CUP$SintacticoCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCCSS$parser.done_parsing();
          return CUP$SintacticoCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

