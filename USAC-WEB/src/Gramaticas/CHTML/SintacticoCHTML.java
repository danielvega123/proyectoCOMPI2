
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 22:59:28 CST 2018
//----------------------------------------------------

package Gramaticas.CHTML;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import EDD.CSJ.*;
import Errores.ER;
import Errores.ListaErrores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 22:59:28 CST 2018
  */
public class SintacticoCHTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCHTML() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\013\000\002\004" +
    "\004\000\002\003\013\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\010\014\000\002\006\016\000\002" +
    "\007\016\000\002\005\014\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\040\007\000\002\037\014\000\002" +
    "\034\014\000\002\035\004\000\002\035\003\000\002\036" +
    "\017\000\002\033\014\000\002\025\014\000\002\032\004" +
    "\000\002\032\003\000\002\026\013\000\002\027\004\000" +
    "\002\027\004\000\002\027\003\000\002\027\003\000\002" +
    "\030\013\000\002\031\013\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\016\014" +
    "\000\002\015\014\000\002\014\014\000\002\014\013\000" +
    "\002\013\014\000\002\024\014\000\002\012\014\000\002" +
    "\044\003\000\002\044\002\000\002\041\005\000\002\041" +
    "\004\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\051\003\000\002\051\003\000\002" +
    "\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\050\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\051\010\001\002\000\004\050\011\001\002\000" +
    "\004\006\347\001\002\000\004\050\022\001\002\000\004" +
    "\050\014\001\002\000\004\005\015\001\002\000\004\043" +
    "\016\001\002\000\004\004\017\001\002\000\004\051\020" +
    "\001\002\000\004\002\000\001\002\000\004\050\uffff\001" +
    "\002\000\004\012\023\001\002\000\022\010\030\020\035" +
    "\036\031\037\025\040\024\041\033\042\026\051\uffc0\001" +
    "\002\000\004\044\345\001\002\000\004\044\343\001\002" +
    "\000\004\044\341\001\002\000\004\051\051\001\002\000" +
    "\004\044\047\001\002\000\004\044\045\001\002\000\004" +
    "\045\044\001\002\000\004\044\042\001\002\000\022\010" +
    "\030\020\035\036\031\037\025\040\024\041\033\042\026" +
    "\051\uffc1\001\002\000\004\044\036\001\002\000\004\054" +
    "\037\001\002\000\004\045\uffb7\001\002\000\004\045\041" +
    "\001\002\000\022\010\uffbf\020\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\051\uffbf\001\002\000\004\054\043" +
    "\001\002\000\004\045\uffba\001\002\000\022\010\uffbe\020" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\051\uffbe" +
    "\001\002\000\004\054\046\001\002\000\004\045\uffbd\001" +
    "\002\000\004\054\050\001\002\000\004\045\uffb8\001\002" +
    "\000\004\050\061\001\002\000\004\050\uffe1\001\002\000" +
    "\004\050\uffe8\001\002\000\004\050\uffe3\001\002\000\004" +
    "\050\334\001\002\000\004\050\uffe4\001\002\000\004\050" +
    "\uffe5\001\002\000\004\050\uffe0\001\002\000\030\014\067" +
    "\016\074\017\076\021\077\022\071\023\073\024\070\030" +
    "\100\031\072\034\075\035\101\001\002\000\004\050\uffe2" +
    "\001\002\000\004\050\uffde\001\002\000\004\050\uffdf\001" +
    "\002\000\004\050\uffe7\001\002\000\004\050\uffe6\001\002" +
    "\000\022\010\030\020\035\036\031\037\025\040\024\041" +
    "\033\042\026\051\uffc0\001\002\000\022\010\030\020\035" +
    "\036\031\037\025\040\024\041\033\042\026\051\uffc0\001" +
    "\002\000\022\010\030\020\035\036\031\037\025\040\024" +
    "\041\033\042\026\051\uffc0\001\002\000\022\010\030\020" +
    "\035\036\031\037\025\040\024\041\033\042\026\051\uffc0" +
    "\001\002\000\022\010\030\020\035\036\031\037\025\040" +
    "\024\041\033\042\026\051\uffc0\001\002\000\022\010\030" +
    "\020\035\036\031\037\025\040\024\041\033\042\026\051" +
    "\uffc0\001\002\000\022\010\030\020\035\036\031\037\025" +
    "\040\024\041\033\042\026\051\uffc0\001\002\000\022\010" +
    "\030\020\035\036\031\037\025\040\024\041\033\042\026" +
    "\051\uffc0\001\002\000\022\010\030\020\035\036\031\037" +
    "\025\040\024\041\033\042\026\051\uffc0\001\002\000\022" +
    "\010\030\020\035\036\031\037\025\040\024\041\033\042" +
    "\026\051\uffc0\001\002\000\004\043\102\001\002\000\004" +
    "\005\103\001\002\000\004\051\104\001\002\000\004\050" +
    "\uffdd\001\002\000\004\051\106\001\002\000\010\052\111" +
    "\053\110\054\107\001\002\000\004\050\uffb4\001\002\000" +
    "\004\050\uffb6\001\002\000\004\050\uffb5\001\002\000\004" +
    "\050\113\001\002\000\004\005\114\001\002\000\004\043" +
    "\115\001\002\000\004\030\116\001\002\000\004\051\117" +
    "\001\002\000\004\050\uffd7\001\002\000\004\051\121\001" +
    "\002\000\006\050\123\054\122\001\002\000\004\050\130" +
    "\001\002\000\004\005\124\001\002\000\004\043\125\001" +
    "\002\000\004\021\126\001\002\000\004\051\127\001\002" +
    "\000\004\050\uffc5\001\002\000\004\005\131\001\002\000" +
    "\004\043\132\001\002\000\004\021\133\001\002\000\004" +
    "\051\134\001\002\000\004\050\uffc6\001\002\000\004\051" +
    "\136\001\002\000\010\052\111\053\110\054\107\001\002" +
    "\000\004\050\140\001\002\000\004\005\141\001\002\000" +
    "\004\043\142\001\002\000\004\017\143\001\002\000\004" +
    "\051\144\001\002\000\004\050\uffc3\001\002\000\004\051" +
    "\146\001\002\000\004\052\147\001\002\000\004\050\150" +
    "\001\002\000\004\005\151\001\002\000\004\043\152\001" +
    "\002\000\004\034\153\001\002\000\004\051\154\001\002" +
    "\000\004\050\uffdc\001\002\000\004\051\156\001\002\000" +
    "\010\052\111\053\110\054\107\001\002\000\004\050\160" +
    "\001\002\000\004\005\161\001\002\000\004\043\162\001" +
    "\002\000\004\016\163\001\002\000\004\051\164\001\002" +
    "\000\004\050\uffc4\001\002\000\004\051\166\001\002\000" +
    "\010\052\111\053\110\054\107\001\002\000\004\050\170" +
    "\001\002\000\004\005\171\001\002\000\004\043\172\001" +
    "\002\000\004\023\173\001\002\000\004\051\174\001\002" +
    "\000\004\050\uffc8\001\002\000\004\051\176\001\002\000" +
    "\004\050\201\001\002\000\004\050\uffd9\001\002\000\004" +
    "\050\217\001\002\000\004\032\202\001\002\000\004\033" +
    "\203\001\002\000\004\044\204\001\002\000\004\054\205" +
    "\001\002\000\004\045\206\001\002\000\004\051\207\001" +
    "\002\000\010\052\111\053\110\054\107\001\002\000\004" +
    "\050\211\001\002\000\004\005\212\001\002\000\004\043" +
    "\213\001\002\000\004\032\214\001\002\000\004\051\215" +
    "\001\002\000\004\050\uffd8\001\002\000\004\050\uffda\001" +
    "\002\000\006\005\220\032\202\001\002\000\004\043\221" +
    "\001\002\000\004\031\222\001\002\000\004\051\223\001" +
    "\002\000\004\050\uffdb\001\002\000\004\051\225\001\002" +
    "\000\010\052\111\053\110\054\107\001\002\000\004\050" +
    "\227\001\002\000\004\005\230\001\002\000\004\043\231" +
    "\001\002\000\004\022\232\001\002\000\004\051\233\001" +
    "\002\000\004\050\uffc7\001\002\000\004\051\235\001\002" +
    "\000\004\050\237\001\002\000\004\050\uffd4\001\002\000" +
    "\004\025\244\001\002\000\004\050\242\001\002\000\004" +
    "\050\uffd5\001\002\000\006\005\243\025\244\001\002\000" +
    "\004\043\306\001\002\000\004\051\245\001\002\000\004" +
    "\050\251\001\002\000\004\050\301\001\002\000\004\050" +
    "\uffcf\001\002\000\004\050\uffd0\001\002\000\006\026\253" +
    "\027\252\001\002\000\004\051\263\001\002\000\004\051" +
    "\254\001\002\000\010\052\111\053\110\054\107\001\002" +
    "\000\004\050\256\001\002\000\004\005\257\001\002\000" +
    "\004\043\260\001\002\000\004\026\261\001\002\000\004" +
    "\051\262\001\002\000\004\050\uffce\001\002\000\012\050" +
    "\267\052\111\053\110\054\107\001\002\000\004\050\uffc9" +
    "\001\002\000\004\050\272\001\002\000\004\050\uffca\001" +
    "\002\000\010\016\074\021\077\022\071\001\002\000\004" +
    "\050\uffcb\001\002\000\004\050\uffcc\001\002\000\004\005" +
    "\273\001\002\000\004\043\274\001\002\000\004\027\275" +
    "\001\002\000\004\051\276\001\002\000\004\050\uffcd\001" +
    "\002\000\004\050\uffd1\001\002\000\004\050\uffd2\001\002" +
    "\000\010\005\302\026\253\027\252\001\002\000\004\043" +
    "\303\001\002\000\004\025\304\001\002\000\004\051\305" +
    "\001\002\000\004\050\uffd3\001\002\000\004\024\307\001" +
    "\002\000\004\051\310\001\002\000\004\050\uffd6\001\002" +
    "\000\004\051\312\001\002\000\004\050\061\001\002\000" +
    "\004\050\322\001\002\000\004\050\uffe9\001\002\000\004" +
    "\050\ufff1\001\002\000\004\050\ufff3\001\002\000\004\050" +
    "\uffed\001\002\000\004\050\uffeb\001\002\000\004\050\ufff0" +
    "\001\002\000\032\005\330\014\067\016\074\017\076\021" +
    "\077\022\071\023\073\024\070\030\100\031\072\034\075" +
    "\035\101\001\002\000\004\050\ufff2\001\002\000\004\050" +
    "\uffee\001\002\000\004\050\uffea\001\002\000\004\050\uffef" +
    "\001\002\000\004\050\uffec\001\002\000\004\043\331\001" +
    "\002\000\004\014\332\001\002\000\004\051\333\001\002" +
    "\000\004\050\uffc2\001\002\000\032\005\335\014\067\016" +
    "\074\017\076\021\077\022\071\023\073\024\070\030\100" +
    "\031\072\034\075\035\101\001\002\000\004\043\336\001" +
    "\002\000\004\012\337\001\002\000\004\051\340\001\002" +
    "\000\004\050\ufff4\001\002\000\004\054\342\001\002\000" +
    "\004\045\uffb9\001\002\000\004\054\344\001\002\000\004" +
    "\045\uffbb\001\002\000\004\054\346\001\002\000\004\045" +
    "\uffbc\001\002\000\004\051\350\001\002\000\004\050\355" +
    "\001\002\000\004\050\ufffa\001\002\000\004\050\ufff8\001" +
    "\002\000\004\050\u010f\001\002\000\004\050\ufff9\001\002" +
    "\000\010\007\356\011\360\015\357\001\002\000\004\010" +
    "\u0103\001\002\000\022\010\030\020\035\036\031\037\025" +
    "\040\024\041\033\042\026\051\uffc0\001\002\000\004\010" +
    "\361\001\002\000\004\044\362\001\002\000\004\054\363" +
    "\001\002\000\004\045\364\001\002\000\004\051\365\001" +
    "\002\000\004\050\366\001\002\000\004\005\367\001\002" +
    "\000\004\043\370\001\002\000\004\011\371\001\002\000" +
    "\004\051\372\001\002\000\004\050\ufff5\001\002\000\004" +
    "\051\374\001\002\000\004\054\375\001\002\000\004\050" +
    "\376\001\002\000\004\005\377\001\002\000\004\043\u0100" +
    "\001\002\000\004\015\u0101\001\002\000\004\051\u0102\001" +
    "\002\000\004\050\ufff7\001\002\000\004\044\u0104\001\002" +
    "\000\004\054\u0105\001\002\000\004\045\u0106\001\002\000" +
    "\004\051\u0107\001\002\000\004\050\u0108\001\002\000\004" +
    "\005\u0109\001\002\000\004\043\u010a\001\002\000\004\007" +
    "\u010b\001\002\000\004\051\u010c\001\002\000\004\050\ufff6" +
    "\001\002\000\004\050\ufffd\001\002\000\004\050\ufffb\001" +
    "\002\000\012\005\u0111\007\356\011\360\015\357\001\002" +
    "\000\004\050\ufffc\001\002\000\004\043\u0112\001\002\000" +
    "\004\006\u0113\001\002\000\004\051\u0114\001\002\000\004" +
    "\050\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\012\001\001\000\002\001\001\000\004\005" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\033" +
    "\042\031\044\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\011\054\012\053\013\061\014\051\015\057" +
    "\016\063\024\062\025\055\033\065\034\056\037\064\040" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\315\013\322\014\314\015\320\016" +
    "\325\024\323\025\316\033\326\034\317\037\324\040\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\033\042\031\044\310\001\001\000\010\041\033" +
    "\042\031\044\233\001\001\000\010\041\033\042\031\044" +
    "\223\001\001\000\010\041\033\042\031\044\174\001\001" +
    "\000\010\041\033\042\031\044\164\001\001\000\010\041" +
    "\033\042\031\044\154\001\001\000\010\041\033\042\031" +
    "\044\144\001\001\000\010\041\033\042\031\044\134\001" +
    "\001\000\010\041\033\042\031\044\117\001\001\000\010" +
    "\041\033\042\031\044\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\177\036\176\001\001\000\002\001\001\000" +
    "\004\036\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\235\032\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\245\030\247\031\246\001\001" +
    "\000\006\030\277\031\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\267\014\263\015" +
    "\265\050\264\051\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\312\012\053\013\061\014" +
    "\051\015\057\016\063\024\062\025\055\033\065\034\056" +
    "\037\064\040\052\001\001\000\030\012\315\013\322\014" +
    "\314\015\320\016\325\024\323\025\316\033\326\034\317" +
    "\037\324\040\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\350\007\353\010\351\021\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u010c\007" +
    "\u010f\010\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\033\042\031\044\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

/*public String resultado="";
public Hashtable<String,Simbolo> simbolos = new Hashtable<String,Simbolo>();
//public Hashtable<String,Simbolo_Ejemplo> simbolos;*/

ListaErrores errores = ListaErrores.getListaerror();
public ArbolCSJ arbol = new ArbolCSJ();
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        errores.agregarerror(new ER((s.right+1),s.left, (String) s.value, 2, "Valor no conocido"));
}
             

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+"  Identificador " + s.value + " no reconocido.");
        errores.agregarerror(new ER((s.right+1),s.left, (String) s.value, 2, "Valor no conocido"));
}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCHTML$actions {
  private final SintacticoCHTML parser;

  /** Constructor */
  CUP$SintacticoCHTML$actions(SintacticoCHTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCHTML$do_action(
    int                        CUP$SintacticoCHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCHTML$parser,
    java.util.Stack            CUP$SintacticoCHTML$stack,
    int                        CUP$SintacticoCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCHTML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
		nodo s =new nodo("cadena", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
		nodo s =new nodo("num", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
		nodo s =new nodo("iden", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
    
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PROPIEDADES ::= eclick igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("click",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PROPIEDADES ::= pruta igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("ruta",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PROPIEDADES ::= palineado igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("alineado",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PROPIEDADES ::= pancho igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("ancho",aleft,aright,false,null);
				nodo s1 =new nodo("num", aleft, aright, false, null);    		
				ArrayList<nodo> hijos = new ArrayList<nodo>();

				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s1.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(s1);
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PROPIEDADES ::= pgrupo igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("grupo",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PROPIEDADES ::= palto igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("alto",aleft,aright,false,null);
				nodo s1 =new nodo("num", aleft, aright, false, null);    		
				ArrayList<nodo> hijos = new ArrayList<nodo>();

				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s1.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(s1);
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PROPIEDADES ::= pid igual cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				nodo s = new nodo("id",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("PROPIEDADES",32, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LPROPIEDADES ::= PROPIEDADES pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		
					ArrayList<nodo> hijos = new ArrayList<nodo>();
					hijos.add((nodo)a);
					RESULT = hijos;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LPROPIEDADES",31, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LPROPIEDADES ::= LPROPIEDADES PROPIEDADES pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		
					ArrayList<nodo> hijos = (ArrayList<nodo>)a;
					hijos.add((nodo)b);
					RESULT = hijos;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LPROPIEDADES",31, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALPROPIEDAD ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("VALPROPIEDAD",34, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALPROPIEDAD ::= LPROPIEDADES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
					nodo s = new nodo("listapropiedades",aleft,aright,false,null);
					s.setHijos((ArrayList<nodo>)a);
					RESULT=s;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("VALPROPIEDAD",34, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETIPANEL ::= menor epanel VALPROPIEDAD mayor ETIBODY menor efin menos epanel mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("panel",cleft,cright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			nodo inst = new nodo("cuerpo",dleft,dright,false,null);
			inst.setHijos((ArrayList<nodo>)d);
			hijos.add(inst);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIPANEL",8, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETICAJATEXTO ::= menor ecajatexto VALPROPIEDAD mayor E menor efin menos ecajatexto mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("cajatexto",cleft,cright,false,null);
			//nodo cad = new nodo("valor",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//hijos.add((nodo)d);
			//cad.setHijos(hijos);

			hijos = new ArrayList<nodo>();
			if(b!=null){hijos.add((nodo)b);}
			hijos.add((nodo)d);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETICAJATEXTO",18, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETITEXTO ::= menor etexto VALPROPIEDAD mayor E menor efin menos etexto mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("texto",cleft,cright,false,null);
			//nodo cad = new nodo("valor",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//hijos.add((nodo)d);
			//cad.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			hijos.add((nodo)d);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETITEXTO",9, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETIIMAGEN ::= menor eimagen VALPROPIEDAD mayor menor efin menos eimagen mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-6)).value;
		
			nodo s = new nodo("imagen",cleft,cright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//hijos.add(new nodo(d.toString(),dleft,dright,false,null));
			//cad.setHijos(hijos);
			//hijos = new ArrayList<nodo>();

			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			//hijos.add(cad);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIIMAGEN",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETIIMAGEN ::= menor eimagen VALPROPIEDAD mayor cadena menor efin menos eimagen mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("imagen",cleft,cright,false,null);
			nodo cad = new nodo("cadena",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add(new nodo(d.toString(),dleft,dright,false,null));
			cad.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			hijos.add(cad);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIIMAGEN",10, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETIBOTON ::= menor eboton VALPROPIEDAD mayor E menor efin menos eboton mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("boton",cleft,cright,false,null);
			//nodo cad = new nodo("valor",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//hijos.add((nodo)d);
			//cad.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			//hijos = new ArrayList<nodo>();
			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			hijos.add((nodo)d);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBOTON",11, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETIENLACE ::= menor eenlace VALPROPIEDAD mayor E menor efin menos eenlace mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("enlace",cleft,cright,false,null);
			//nodo cad = new nodo("valor",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//hijos.add((nodo)d);
			//cad.setHijos(hijos);

			hijos = new ArrayList<nodo>();
			if(b!=null){hijos.add((nodo)b);}
			hijos.add((nodo)d);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIENLACE",12, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LVALCELDAS ::= ETIIMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				RESULT=a;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LVALCELDAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LVALCELDAS ::= ETIBOTON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				RESULT=a;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LVALCELDAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LVALCELDAS ::= ETITEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				RESULT=a;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LVALCELDAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LVALCELDAS ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				RESULT=a;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LVALCELDAS",38, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CELDAS ::= menor ecelda mayor LVALCELDAS menor efin menos ecelda mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("celda",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)b);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDAS",23, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CELDASENCABEZADO ::= menor eceldaencabezado mayor E menor efin menos eceldaencabezado mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("celdaencabezado",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)b);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("CELDASENCABEZADO",22, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ETICOLUMNAS ::= CELDAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
					ArrayList<nodo> hijos = new ArrayList<nodo>();
					hijos.add((nodo)a);
					RESULT = hijos;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETICOLUMNAS",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ETICOLUMNAS ::= CELDASENCABEZADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
					ArrayList<nodo> hijos = new ArrayList<nodo>();
					hijos.add((nodo)a);
					RESULT = hijos;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETICOLUMNAS",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ETICOLUMNAS ::= ETICOLUMNAS CELDAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
					ArrayList<nodo> hijos = (ArrayList<nodo>)a;
					hijos.add((nodo)b);
					RESULT = hijos;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETICOLUMNAS",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ETICOLUMNAS ::= ETICOLUMNAS CELDASENCABEZADO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
					ArrayList<nodo> hijos = (ArrayList<nodo>)a;
					hijos.add((nodo)b);
					RESULT = hijos;
				
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETICOLUMNAS",21, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ETIFILAS ::= menor efila mayor ETICOLUMNAS menor efin menos efila mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("listaceldas",aleft,aright,false,null);
			s.setHijos((ArrayList<nodo>)b);
			RESULT=s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIFILAS",20, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCOLUMNAS ::= ETIFILAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LCOLUMNAS",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LCOLUMNAS ::= LCOLUMNAS ETIFILAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LCOLUMNAS",24, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ETITABLA ::= menor etabla VALPROPIEDAD mayor LCOLUMNAS menor efin menos etabla mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("tabla",aleft,aright,false,null);
			nodo col = new nodo("listacolumnas",cleft,cright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			col.setHijos((ArrayList<nodo>)c);
			if(b!=null){hijos.add((nodo)b);}
			hijos.add(col);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETITABLA",19, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ETIAREATEXTO ::= menor eareatexto VALPROPIEDAD mayor E menor efin menos eareatexto mayor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("areatexto",cleft,cright,false,null);
			//nodo cad = new nodo("valor",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			//hijos.add((nodo)d);
			//cad.setHijos(hijos);
			//hijos = new ArrayList<nodo>();
			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			hijos.add((nodo)d);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIAREATEXTO",25, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ETIOPCIONES ::= menor eopcion evalor igual cadena pcoma mayor E menor efin menos eopcion mayor 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-11)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-11)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("opcion",hleft,hright,false,null);
			nodo val = new nodo("valor",dleft,dright,false,null);
			nodo eti = new nodo("etiqueta",aleft,aright,false,null);

			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add(new nodo(e.toString(),eleft,eright,false,null));
			val.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			hijos.add((nodo)a);
			eti.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			hijos.add(val);
			hijos.add(eti);
			s.setHijos(hijos);
			RESULT=s;

		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIOPCIONES",28, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPCIONCAJA ::= ETIOPCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONCAJA",27, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCIONCAJA ::= OPCIONCAJA ETIOPCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("OPCIONCAJA",27, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ETICAJAOPCIONES ::= menor ecajaopciones VALPROPIEDAD mayor OPCIONCAJA menor efin menos ecajaopciones mayor 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("cajaopcion",dleft,dright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo hi = new nodo("listaopciones",cleft,cright,false,null);
			hi.setHijos((ArrayList<nodo>)c);

			hijos = new ArrayList<nodo>();
			//if(a!=null){hijos.add((nodo)a);}
			if(b!=null){hijos.add((nodo)b);}
			hijos.add(hi);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETICAJAOPCIONES",26, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ETISPINNER ::= menor econtador VALPROPIEDAD mayor num menor efin menos econtador mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("spinner",aleft,aright,false,null);
			nodo n =new nodo("num", aleft, aright, false, a);    
    		ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add(new nodo(c.toString(),cleft,cright,false,null));
			n.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			if(b!=null){hijos.add((nodo)b);}
			hijos.add(n);
			s.setHijos(hijos);
			RESULT=s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETISPINNER",29, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ETISALTO ::= menor esalto menos efin mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-3)).value;
		
				RESULT = new nodo("salto",aleft,aright,false,null);
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETISALTO",30, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ETIBODY ::= ETICAJATEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ETIBODY ::= ETIENLACE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ETIBODY ::= ETIBOTON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ETIBODY ::= ETIIMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ETIBODY ::= ETITEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETIBODY ::= ETIPANEL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETIBODY ::= ETITABLA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIBODY ::= ETICAJAOPCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIBODY ::= ETIAREATEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIBODY ::= ETISPINNER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIBODY ::= ETISALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIBODY ::= ETIBODY ETISALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIBODY ::= ETIBODY ETISPINNER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIBODY ::= ETIBODY ETICAJAOPCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIBODY ::= ETIBODY ETIAREATEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETIBODY ::= ETIBODY ETITABLA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ETIBODY ::= ETIBODY ETICAJATEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ETIBODY ::= ETIBODY ETIENLACE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ETIBODY ::= ETIBODY ETIBOTON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ETIBODY ::= ETIBODY ETIIMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ETIBODY ::= ETIBODY ETITEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ETIBODY ::= ETIBODY ETIPANEL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIBODY",7, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= menor ecuerpo VALPROPIEDAD mayor ETIBODY menor efin menos ecuerpo mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
		nodo s = new nodo("cuerpo",aleft,aright,false,null);
		
		s.setHijos((ArrayList<nodo>)b);
		RESULT = s;
	
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TCCSS ::= menor eccss pruta igual cadena pcoma mayor menor efin menos eccss mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		
		nodo s = new nodo(b.toString(),bleft,bright,false,null);
		RESULT = s;
	
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TCCSS",5, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TCSJ ::= menor ecjs pruta igual cadena pcoma mayor menor efin menos ecjs mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		
		nodo s = new nodo(b.toString(),bleft,bright,false,null);
		RESULT = s;
	
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TCSJ",4, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TITULO ::= menor etitulo VALPROPIEDAD mayor cadena menor efin menos etitulo mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
	    nodo cad = new nodo("cadena",bleft,bright,false,null);
	    ArrayList<nodo> hijos = new ArrayList<>();
		nodo s = new nodo(b.toString(),bleft,bright,false,null);
	    hijos.add(s);
		cad.setHijos(hijos);
		RESULT = cad;
	
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("TITULO",6, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ETIHEADER ::= TITULO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("titulo",aleft,aright,false,null);
				hijos.add((nodo)a);
				s.setHijos((hijos));
				hijos = new ArrayList<nodo>();
				hijos.add(s);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIHEADER",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ETIHEADER ::= TCCSS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("css",aleft,aright,false,null);
				hijos.add((nodo)a);
				s.setHijos((hijos));
				hijos = new ArrayList<nodo>();
				hijos.add(s);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIHEADER",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ETIHEADER ::= TCSJ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("csj",aleft,aright,false,null);
				hijos.add((nodo)a);
				s.setHijos((hijos));
				hijos = new ArrayList<nodo>();
				hijos.add(s);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIHEADER",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ETIHEADER ::= ETIHEADER TITULO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("titulo",aleft,aright,false,null);
				hijos.add((nodo)b);
				s.setHijos((hijos));
				hijos = (ArrayList<nodo>)a;
				hijos.add(s);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIHEADER",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ETIHEADER ::= ETIHEADER TCCSS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("css",aleft,aright,false,null);
				hijos.add((nodo)b);
				s.setHijos((hijos));
				hijos = (ArrayList<nodo>)a;
				hijos.add(s);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIHEADER",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ETIHEADER ::= ETIHEADER TCSJ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("csj",aleft,aright,false,null);
				hijos.add((nodo)b);
				s.setHijos((hijos));
				hijos = (ArrayList<nodo>)a;
				hijos.add(s);
				RESULT=hijos;
			
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("ETIHEADER",15, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HEADER ::= menor eencabezado mayor ETIHEADER menor efin menos eencabezado mayor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("encabezado",bleft,bright,false,null);
			s.setHijos((ArrayList<nodo>)a);
			RESULT = s;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("HEADER",1, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LABELS ::= HEADER BODY 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			hijos.add((nodo)b);
			RESULT = hijos;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("LABELS",2, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= menor echtml mayor LABELS menor efin menos echtml mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-5)).value;
		
			nodo s = new nodo("chtml",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			s.setHijos((ArrayList<nodo>)b);
			hijos.add(s);
			nodo ini = parser.arbol.getRaiz();
			ini.setHijos(hijos);
			RESULT = ini;
		
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.elementAt(CUP$SintacticoCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCHTML$parser.done_parsing();
          return CUP$SintacticoCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

