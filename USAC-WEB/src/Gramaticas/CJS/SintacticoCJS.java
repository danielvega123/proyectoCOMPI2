
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 22:58:11 CST 2018
//----------------------------------------------------

package Gramaticas.CJS;

import EDD.CSJ.*;
import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import Errores.ER;
import Errores.ListaErrores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 22:58:11 CST 2018
  */
public class SintacticoCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCJS() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\006" +
    "\005\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\005\000\002\006\005\000\002\006\004\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\005\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\021" +
    "\006\000\002\013\005\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\004\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\036\012" +
    "\000\002\034\012\000\002\034\011\000\002\042\012\000" +
    "\002\040\003\000\002\040\003\000\002\037\011\000\002" +
    "\037\002\000\002\033\006\000\002\032\004\000\002\031" +
    "\003\000\002\030\011\000\002\026\017\000\002\027\003" +
    "\000\002\027\003\000\002\022\012\000\002\024\004\000" +
    "\002\024\003\000\002\023\005\000\002\023\002\000\002" +
    "\025\006\000\002\015\012\000\002\016\006\000\002\016" +
    "\002\000\002\014\006\000\002\011\012\000\002\041\011" +
    "\000\002\012\005\000\002\012\003\000\002\012\002\000" +
    "\002\007\004\000\002\020\004\000\002\020\006\000\002" +
    "\020\007\000\002\017\005\000\002\017\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\006\000\002\004\005" +
    "\000\002\004\002\000\002\010\005\000\002\010\003\000" +
    "\002\010\002\000\002\044\005\000\002\044\005\000\002" +
    "\044\004\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\003\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\004\000\002\043\004\000\002\043" +
    "\006\000\002\043\010\000\002\043\006\000\002\043\005" +
    "\000\002\043\007\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\026\004\030\010\026\011\017\013\033\014" +
    "\013\016\014\017\005\022\006\024\031\062\034\001\002" +
    "\000\004\047\u0131\001\002\000\004\052\u0123\001\002\000" +
    "\004\052\u0113\001\002\000\030\002\uffe9\004\uffe9\010\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\022\uffe9\024" +
    "\uffe9\062\uffe9\001\002\000\004\047\u0112\001\002\000\030" +
    "\002\uffed\004\uffed\010\uffed\011\uffed\013\uffed\014\uffed\016" +
    "\uffed\017\uffed\022\uffed\024\uffed\062\uffed\001\002\000\004" +
    "\047\u0111\001\002\000\004\052\u010e\001\002\000\004\052" +
    "\u0108\001\002\000\004\047\u0107\001\002\000\030\002\uffe8" +
    "\004\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\022\uffe8\024\uffe8\062\uffe8\001\002\000\004\052\u0104" +
    "\001\002\000\004\002\u0103\001\002\000\030\002\000\004" +
    "\030\010\026\011\017\013\033\014\013\016\014\017\005" +
    "\022\006\024\031\062\034\001\002\000\004\047\355\001" +
    "\002\000\004\047\354\001\002\000\030\002\uffe6\004\uffe6" +
    "\010\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\022" +
    "\uffe6\024\uffe6\062\uffe6\001\002\000\004\047\353\001\002" +
    "\000\004\051\330\001\002\000\030\002\uffea\004\uffea\010" +
    "\uffea\011\uffea\013\uffea\014\uffea\016\uffea\017\uffea\022\uffea" +
    "\024\uffea\062\uffea\001\002\000\004\062\313\001\002\000" +
    "\004\052\300\001\002\000\004\047\277\001\002\000\004" +
    "\062\270\001\002\000\012\050\041\051\035\052\037\054" +
    "\036\001\002\000\006\005\154\007\155\001\002\000\030" +
    "\010\055\035\043\052\053\057\052\060\056\061\051\062" +
    "\050\063\045\064\046\074\042\075\044\001\002\000\034" +
    "\010\055\035\043\052\053\053\uff9d\057\052\060\056\061" +
    "\051\062\050\063\045\064\046\067\uff9d\074\042\075\044" +
    "\001\002\000\004\047\uffaa\001\002\000\032\010\055\035" +
    "\043\052\053\054\054\057\052\060\056\061\051\062\050" +
    "\063\045\064\046\074\042\075\044\001\002\000\054\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\047\uff81\050\uff81\053\uff81\055\uff81\065\uff81\066\uff81" +
    "\067\uff81\001\002\000\030\010\055\035\043\052\053\057" +
    "\052\060\056\061\051\062\050\063\045\064\046\074\042" +
    "\075\044\001\002\000\054\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\047\uff82\050\uff82\053" +
    "\uff82\055\uff82\065\uff82\066\uff82\067\uff82\001\002\000\054" +
    "\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\036" +
    "\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\047\uff7f\050\uff7f\053\uff7f\055\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\001\002\000\054\027\uff7e\030\uff7e\031\uff7e" +
    "\032\uff7e\033\uff7e\034\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050\uff7e" +
    "\053\uff7e\055\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000" +
    "\010\027\124\030\125\047\uffa9\001\002\000\062\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\047\uff85\050\uff85\051\132\052\134\053\uff85\054\133\055" +
    "\uff85\065\uff85\066\uff85\067\uff85\001\002\000\054\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\047\uff84\050\uff84\053\uff84\055\uff84\065\uff84\066\uff84\067" +
    "\uff84\001\002\000\054\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042" +
    "\uff83\043\uff83\044\uff83\045\uff83\047\uff83\050\uff83\053\uff83" +
    "\055\uff83\065\uff83\066\uff83\067\uff83\001\002\000\030\010" +
    "\055\035\043\052\053\057\052\060\056\061\051\062\050" +
    "\063\045\064\046\074\042\075\044\001\002\000\034\010" +
    "\055\035\043\052\053\055\uff9d\057\052\060\056\061\051" +
    "\062\050\063\045\064\046\067\uff9d\074\042\075\044\001" +
    "\002\000\004\051\112\001\002\000\054\027\uff80\030\uff80" +
    "\031\uff80\032\uff80\033\uff80\034\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\047\uff80" +
    "\050\uff80\053\uff80\055\uff80\065\uff80\066\uff80\067\uff80\001" +
    "\002\000\052\027\uff93\030\uff93\031\067\032\072\033\061" +
    "\034\065\036\070\037\066\040\060\041\071\042\075\043" +
    "\063\044\064\045\074\047\uff93\053\uff93\055\uff93\065\062" +
    "\066\073\067\uff93\001\002\000\026\010\055\052\053\057" +
    "\052\060\056\061\051\062\050\063\045\064\046\074\042" +
    "\075\044\001\002\000\026\010\055\052\053\057\052\060" +
    "\056\061\051\062\050\063\045\064\046\074\042\075\044" +
    "\001\002\000\054\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\047\uff8c\050\uff8c\053\uff8c\055" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\001\002\000\026\010\055" +
    "\052\053\057\052\060\056\061\051\062\050\063\045\064" +
    "\046\074\042\075\044\001\002\000\026\010\055\052\053" +
    "\057\052\060\056\061\051\062\050\063\045\064\046\074" +
    "\042\075\044\001\002\000\026\010\055\052\053\057\052" +
    "\060\056\061\051\062\050\063\045\064\046\074\042\075" +
    "\044\001\002\000\026\010\055\052\053\057\052\060\056" +
    "\061\051\062\050\063\045\064\046\074\042\075\044\001" +
    "\002\000\026\010\055\052\053\057\052\060\056\061\051" +
    "\062\050\063\045\064\046\074\042\075\044\001\002\000" +
    "\026\010\055\052\053\057\052\060\056\061\051\062\050" +
    "\063\045\064\046\074\042\075\044\001\002\000\026\010" +
    "\055\052\053\057\052\060\056\061\051\062\050\063\045" +
    "\064\046\074\042\075\044\001\002\000\026\010\055\052" +
    "\053\057\052\060\056\061\051\062\050\063\045\064\046" +
    "\074\042\075\044\001\002\000\054\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\047\uff8b\050" +
    "\uff8b\053\uff8b\055\uff8b\065\uff8b\066\uff8b\067\uff8b\001\002" +
    "\000\026\010\055\052\053\057\052\060\056\061\051\062" +
    "\050\063\045\064\046\074\042\075\044\001\002\000\026" +
    "\010\055\052\053\057\052\060\056\061\051\062\050\063" +
    "\045\064\046\074\042\075\044\001\002\000\054\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\036\070\037" +
    "\066\040\060\041\071\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\047\uff92\050\uff92\053\uff92\055\uff92\065\062\066\073\067" +
    "\uff92\001\002\000\036\027\uff99\030\uff99\036\070\037\066" +
    "\040\060\041\071\042\075\043\063\047\uff99\053\uff99\055" +
    "\uff99\065\062\066\073\067\uff99\001\002\000\036\027\uff97" +
    "\030\uff97\036\070\037\066\040\060\041\071\042\075\043" +
    "\063\047\uff97\053\uff97\055\uff97\065\062\066\073\067\uff97" +
    "\001\002\000\054\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\036\uff8f\037\066\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f\053\uff8f\055" +
    "\uff8f\065\062\066\073\067\uff8f\001\002\000\054\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\037" +
    "\066\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\047\uff8d\050\uff8d\053\uff8d\055\uff8d\065\062\066\073\067" +
    "\uff8d\001\002\000\036\027\uff94\030\uff94\036\070\037\066" +
    "\040\060\041\071\042\075\043\063\047\uff94\053\uff94\055" +
    "\uff94\065\062\066\073\067\uff94\001\002\000\054\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\036\uff8e\037" +
    "\066\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\047\uff8e\050\uff8e\053\uff8e\055\uff8e\065\062\066\073\067" +
    "\uff8e\001\002\000\036\027\uff95\030\uff95\036\070\037\066" +
    "\040\060\041\071\042\075\043\063\047\uff95\053\uff95\055" +
    "\uff95\065\062\066\073\067\uff95\001\002\000\036\027\uff98" +
    "\030\uff98\036\070\037\066\040\060\041\071\042\075\043" +
    "\063\047\uff98\053\uff98\055\uff98\065\062\066\073\067\uff98" +
    "\001\002\000\054\027\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\036\070\037\066\040\060\041\071\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\047\uff91\050\uff91\053\uff91\055" +
    "\uff91\065\062\066\073\067\uff91\001\002\000\036\027\uff96" +
    "\030\uff96\036\070\037\066\040\060\041\071\042\075\043" +
    "\063\047\uff96\053\uff96\055\uff96\065\062\066\073\067\uff96" +
    "\001\002\000\054\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\036\uff90\037\066\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\047\uff90\050\uff90\053\uff90\055" +
    "\uff90\065\062\066\073\067\uff90\001\002\000\004\006\113" +
    "\001\002\000\004\052\114\001\002\000\004\063\115\001" +
    "\002\000\004\053\116\001\002\000\054\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\047\uff89" +
    "\050\uff89\053\uff89\055\uff89\065\uff89\066\uff89\067\uff89\001" +
    "\002\000\014\027\124\030\125\053\uff9e\055\uff9e\067\uff9e" +
    "\001\002\000\006\055\121\067\122\001\002\000\004\047" +
    "\uffa8\001\002\000\030\010\055\035\043\052\053\057\052" +
    "\060\056\061\051\062\050\063\045\064\046\074\042\075" +
    "\044\001\002\000\014\027\124\030\125\053\uff9f\055\uff9f" +
    "\067\uff9f\001\002\000\030\010\055\035\043\052\053\057" +
    "\052\060\056\061\051\062\050\063\045\064\046\074\042" +
    "\075\044\001\002\000\030\010\055\035\043\052\053\057" +
    "\052\060\056\061\051\062\050\063\045\064\046\074\042" +
    "\075\044\001\002\000\016\027\124\030\uff9b\047\uff9b\053" +
    "\uff9b\055\uff9b\067\uff9b\001\002\000\016\027\uff9c\030\uff9c" +
    "\047\uff9c\053\uff9c\055\uff9c\067\uff9c\001\002\000\010\027" +
    "\124\030\125\053\131\001\002\000\054\027\uff7d\030\uff7d" +
    "\031\uff7d\032\uff7d\033\uff7d\034\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\047\uff7d" +
    "\050\uff7d\053\uff7d\055\uff7d\065\uff7d\066\uff7d\067\uff7d\001" +
    "\002\000\006\025\142\026\141\001\002\000\030\010\055" +
    "\035\043\052\053\057\052\060\056\061\051\062\050\063" +
    "\045\064\046\074\042\075\044\001\002\000\034\010\055" +
    "\035\043\052\053\053\uff9d\057\052\060\056\061\051\062" +
    "\050\063\045\064\046\067\uff9d\074\042\075\044\001\002" +
    "\000\006\053\136\067\122\001\002\000\054\027\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\034\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\047" +
    "\uff88\050\uff88\053\uff88\055\uff88\065\uff88\066\uff88\067\uff88" +
    "\001\002\000\010\027\124\030\125\055\140\001\002\000" +
    "\054\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\047\uff8a\050\uff8a\053\uff8a\055\uff8a\065\uff8a" +
    "\066\uff8a\067\uff8a\001\002\000\054\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\047\uff87\050" +
    "\uff87\053\uff87\055\uff87\065\uff87\066\uff87\067\uff87\001\002" +
    "\000\004\052\143\001\002\000\004\053\144\001\002\000" +
    "\054\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\047\uff86\050\uff86\053\uff86\055\uff86\065\uff86" +
    "\066\uff86\067\uff86\001\002\000\016\027\uff9a\030\uff9a\047" +
    "\uff9a\053\uff9a\055\uff9a\067\uff9a\001\002\000\006\053\147" +
    "\067\122\001\002\000\006\047\uffe5\053\uffe5\001\002\000" +
    "\010\027\124\030\125\055\151\001\002\000\004\050\152" +
    "\001\002\000\030\010\055\035\043\052\053\057\052\060" +
    "\056\061\051\062\050\063\045\064\046\074\042\075\044" +
    "\001\002\000\010\027\124\030\125\047\uffa7\001\002\000" +
    "\004\052\263\001\002\000\004\052\156\001\002\000\030" +
    "\010\055\035\043\052\053\057\052\060\056\061\051\062" +
    "\050\063\045\064\046\074\042\075\044\001\002\000\010" +
    "\027\124\030\125\067\160\001\002\000\006\013\163\062" +
    "\161\001\002\000\004\052\037\001\002\000\004\053\uffc3" +
    "\001\002\000\004\052\167\001\002\000\004\053\166\001" +
    "\002\000\004\053\uffc4\001\002\000\004\047\uffc5\001\002" +
    "\000\010\053\uffab\062\171\067\uffab\001\002\000\006\053" +
    "\173\067\172\001\002\000\006\053\uffac\067\uffac\001\002" +
    "\000\004\062\262\001\002\000\004\054\174\001\002\000" +
    "\030\004\030\010\026\011\017\012\210\014\013\015\212" +
    "\016\014\017\005\022\006\024\031\062\034\001\002\000" +
    "\004\047\261\001\002\000\036\004\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\055\uffcb\062\uffcb\001\002\000\004" +
    "\047\260\001\002\000\036\004\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\024\uffcf\055\uffcf\062\uffcf\001\002\000\004\047" +
    "\257\001\002\000\004\047\256\001\002\000\004\047\255" +
    "\001\002\000\036\004\uffca\010\uffca\011\uffca\012\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\024\uffca\055\uffca\062\uffca\001\002\000\032\004\030\010" +
    "\026\011\017\012\210\014\013\015\212\016\014\017\005" +
    "\022\006\024\031\055\235\062\034\001\002\000\004\047" +
    "\223\001\002\000\004\047\222\001\002\000\030\010\055" +
    "\035\043\052\053\057\052\060\056\061\051\062\050\063" +
    "\045\064\046\074\042\075\044\001\002\000\004\047\220" +
    "\001\002\000\004\047\uffbe\001\002\000\004\047\217\001" +
    "\002\000\036\004\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024" +
    "\uffcc\055\uffcc\062\uffcc\001\002\000\004\047\216\001\002" +
    "\000\036\004\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6" +
    "\055\uffd6\062\uffd6\001\002\000\036\004\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\024\uffd0\055\uffd0\062\uffd0\001\002\000" +
    "\036\004\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\055" +
    "\uffd4\062\uffd4\001\002\000\010\027\124\030\125\047\uffbf" +
    "\001\002\000\036\004\uffd3\010\uffd3\011\uffd3\012\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\024\uffd3\055\uffd3\062\uffd3\001\002\000\036\004\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\024\uffcd\055\uffcd\062\uffcd\001" +
    "\002\000\004\047\254\001\002\000\036\004\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\024\uffe2\055\uffe2\062\uffe2\001\002" +
    "\000\004\047\253\001\002\000\036\004\uffde\010\uffde\011" +
    "\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\024\uffde\055\uffde\062\uffde\001\002\000" +
    "\004\047\252\001\002\000\004\047\251\001\002\000\004" +
    "\047\250\001\002\000\036\004\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\024\uffe3\055\uffe3\062\uffe3\001\002\000\004\047" +
    "\247\001\002\000\004\053\uffae\001\002\000\004\047\246" +
    "\001\002\000\004\047\245\001\002\000\036\004\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\024\uffe1\055\uffe1\062\uffe1\001" +
    "\002\000\004\047\244\001\002\000\004\047\243\001\002" +
    "\000\036\004\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7" +
    "\055\uffd7\062\uffd7\001\002\000\036\004\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\024\uffdd\055\uffdd\062\uffdd\001\002\000" +
    "\036\004\uffda\010\uffda\011\uffda\012\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\055" +
    "\uffda\062\uffda\001\002\000\036\004\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\024\uffdb\055\uffdb\062\uffdb\001\002\000\036" +
    "\004\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\055\uffdf" +
    "\062\uffdf\001\002\000\036\004\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\024\uffd9\055\uffd9\062\uffd9\001\002\000\036\004" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc\055\uffdc\062" +
    "\uffdc\001\002\000\036\004\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\024\uffe4\055\uffe4\062\uffe4\001\002\000\036\004\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\055\uffe0\062\uffe0" +
    "\001\002\000\036\004\uffd8\010\uffd8\011\uffd8\012\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\055\uffd8\062\uffd8\001\002\000\036\004\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\024\uffd2\055\uffd2\062\uffd2\001" +
    "\002\000\036\004\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024" +
    "\uffd1\055\uffd1\062\uffd1\001\002\000\036\004\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\024\uffc9\055\uffc9\062\uffc9\001\002" +
    "\000\036\004\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce" +
    "\055\uffce\062\uffce\001\002\000\036\004\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\024\uffd5\055\uffd5\062\uffd5\001\002\000" +
    "\006\053\uffad\067\uffad\001\002\000\004\063\264\001\002" +
    "\000\004\067\265\001\002\000\030\010\055\035\043\052" +
    "\053\057\052\060\056\061\051\062\050\063\045\064\046" +
    "\074\042\075\044\001\002\000\010\027\124\030\125\053" +
    "\267\001\002\000\004\047\uffc8\001\002\000\004\052\271" +
    "\001\002\000\010\053\uffab\062\171\067\uffab\001\002\000" +
    "\006\053\273\067\172\001\002\000\004\054\274\001\002" +
    "\000\030\004\030\010\026\011\017\012\210\014\013\015" +
    "\212\016\014\017\005\022\006\024\031\062\034\001\002" +
    "\000\032\004\030\010\026\011\017\012\210\014\013\015" +
    "\212\016\014\017\005\022\006\024\031\055\276\062\034" +
    "\001\002\000\030\002\uffaf\004\uffaf\010\uffaf\011\uffaf\013" +
    "\uffaf\014\uffaf\016\uffaf\017\uffaf\022\uffaf\024\uffaf\062\uffaf" +
    "\001\002\000\030\002\ufff2\004\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\022\ufff2\024\ufff2\062\ufff2" +
    "\001\002\000\030\010\055\035\043\052\053\057\052\060" +
    "\056\061\051\062\050\063\045\064\046\074\042\075\044" +
    "\001\002\000\010\027\124\030\125\053\302\001\002\000" +
    "\004\054\303\001\002\000\030\004\030\010\026\011\017" +
    "\012\210\014\013\015\212\016\014\017\005\022\006\024" +
    "\031\062\034\001\002\000\032\004\030\010\026\011\017" +
    "\012\210\014\013\015\212\016\014\017\005\022\006\024" +
    "\031\055\305\062\034\001\002\000\044\002\uffb1\004\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\306\024\uffb1" +
    "\055\uffb1\062\uffb1\001\002\000\004\054\310\001\002\000" +
    "\042\002\uffb3\004\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\024\uffb3\055\uffb3\062\uffb3\001\002\000\030\004\030" +
    "\010\026\011\017\012\210\014\013\015\212\016\014\017" +
    "\005\022\006\024\031\062\034\001\002\000\032\004\030" +
    "\010\026\011\017\012\210\014\013\015\212\016\014\017" +
    "\005\022\006\024\031\055\312\062\034\001\002\000\042" +
    "\002\uffb2\004\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\024\uffb2\055\uffb2\062\uffb2\001\002\000\012\047\uffa5\050" +
    "\uffa5\054\uffa5\067\uffa5\001\002\000\012\047\uffa0\050\320" +
    "\054\317\067\316\001\002\000\004\047\uffa4\001\002\000" +
    "\004\062\327\001\002\000\030\010\055\035\043\052\053" +
    "\057\052\060\056\061\051\062\050\063\045\064\046\074" +
    "\042\075\044\001\002\000\032\010\055\035\043\052\053" +
    "\054\322\057\052\060\056\061\051\062\050\063\045\064" +
    "\046\074\042\075\044\001\002\000\010\027\124\030\125" +
    "\047\uffa3\001\002\000\034\010\055\035\043\052\053\055" +
    "\uff9d\057\052\060\056\061\051\062\050\063\045\064\046" +
    "\067\uff9d\074\042\075\044\001\002\000\006\055\324\067" +
    "\122\001\002\000\004\047\uffa2\001\002\000\010\027\124" +
    "\030\125\055\326\001\002\000\004\047\uffa1\001\002\000" +
    "\012\047\uffa6\050\uffa6\054\uffa6\067\uffa6\001\002\000\006" +
    "\006\332\007\331\001\002\000\004\052\346\001\002\000" +
    "\004\052\333\001\002\000\030\010\055\035\043\052\053" +
    "\057\052\060\056\061\051\062\050\063\045\064\046\074" +
    "\042\075\044\001\002\000\010\027\124\030\125\053\335" +
    "\001\002\000\006\047\uffc1\051\336\001\002\000\004\005" +
    "\340\001\002\000\004\047\uffc6\001\002\000\004\052\341" +
    "\001\002\000\030\010\055\035\043\052\053\057\052\060" +
    "\056\061\051\062\050\063\045\064\046\074\042\075\044" +
    "\001\002\000\010\027\124\030\125\067\343\001\002\000" +
    "\030\010\055\035\043\052\053\057\052\060\056\061\051" +
    "\062\050\063\045\064\046\074\042\075\044\001\002\000" +
    "\010\027\124\030\125\053\345\001\002\000\004\047\uffc2" +
    "\001\002\000\030\010\055\035\043\052\053\057\052\060" +
    "\056\061\051\062\050\063\045\064\046\074\042\075\044" +
    "\001\002\000\010\027\124\030\125\067\350\001\002\000" +
    "\006\013\163\062\161\001\002\000\004\053\352\001\002" +
    "\000\004\047\uffc7\001\002\000\030\002\ufff0\004\ufff0\010" +
    "\ufff0\011\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0\022\ufff0" +
    "\024\ufff0\062\ufff0\001\002\000\030\002\uffef\004\uffef\010" +
    "\uffef\011\uffef\013\uffef\014\uffef\016\uffef\017\uffef\022\uffef" +
    "\024\uffef\062\uffef\001\002\000\030\002\uffeb\004\uffeb\010" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\022\uffeb" +
    "\024\uffeb\062\uffeb\001\002\000\004\047\u0102\001\002\000" +
    "\030\002\ufffd\004\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd" +
    "\016\ufffd\017\ufffd\022\ufffd\024\ufffd\062\ufffd\001\002\000" +
    "\004\047\u0101\001\002\000\030\002\ufff9\004\ufff9\010\ufff9" +
    "\011\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\022\ufff9\024" +
    "\ufff9\062\ufff9\001\002\000\004\047\u0100\001\002\000\004" +
    "\047\377\001\002\000\030\002\ufffe\004\ufffe\010\ufffe\011" +
    "\ufffe\013\ufffe\014\ufffe\016\ufffe\017\ufffe\022\ufffe\024\ufffe" +
    "\062\ufffe\001\002\000\004\047\376\001\002\000\004\047" +
    "\375\001\002\000\030\002\ufff4\004\ufff4\010\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\017\ufff4\022\ufff4\024\ufff4\062" +
    "\ufff4\001\002\000\004\047\374\001\002\000\030\002\ufffc" +
    "\004\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\016\ufffc\017" +
    "\ufffc\022\ufffc\024\ufffc\062\ufffc\001\002\000\004\047\373" +
    "\001\002\000\030\002\ufff3\004\ufff3\010\ufff3\011\ufff3\013" +
    "\ufff3\014\ufff3\016\ufff3\017\ufff3\022\ufff3\024\ufff3\062\ufff3" +
    "\001\002\000\030\002\ufff7\004\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\016\ufff7\017\ufff7\022\ufff7\024\ufff7\062\ufff7" +
    "\001\002\000\030\002\ufff8\004\ufff8\010\ufff8\011\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\022\ufff8\024\ufff8\062\ufff8" +
    "\001\002\000\030\002\ufffa\004\ufffa\010\ufffa\011\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\017\ufffa\022\ufffa\024\ufffa\062\ufffa" +
    "\001\002\000\030\002\ufff6\004\ufff6\010\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\016\ufff6\017\ufff6\022\ufff6\024\ufff6\062\ufff6" +
    "\001\002\000\030\002\uffff\004\uffff\010\uffff\011\uffff\013" +
    "\uffff\014\uffff\016\uffff\017\uffff\022\uffff\024\uffff\062\uffff" +
    "\001\002\000\030\002\ufffb\004\ufffb\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\016\ufffb\017\ufffb\022\ufffb\024\ufffb\062\ufffb" +
    "\001\002\000\030\002\ufff5\004\ufff5\010\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\022\ufff5\024\ufff5\062\ufff5" +
    "\001\002\000\004\002\001\001\002\000\030\010\055\035" +
    "\043\052\053\057\052\060\056\061\051\062\050\063\045" +
    "\064\046\074\042\075\044\001\002\000\010\027\124\030" +
    "\125\053\u0106\001\002\000\004\047\uffc0\001\002\000\030" +
    "\002\uffee\004\uffee\010\uffee\011\uffee\013\uffee\014\uffee\016" +
    "\uffee\017\uffee\022\uffee\024\uffee\062\uffee\001\002\000\030" +
    "\010\055\035\043\052\053\057\052\060\056\061\051\062" +
    "\050\063\045\064\046\074\042\075\044\001\002\000\010" +
    "\027\124\030\125\053\u010a\001\002\000\004\054\u010b\001" +
    "\002\000\030\004\030\010\026\011\017\012\210\014\013" +
    "\015\212\016\014\017\005\022\006\024\031\062\034\001" +
    "\002\000\032\004\030\010\026\011\017\012\210\014\013" +
    "\015\212\016\014\017\005\022\006\024\031\055\u010d\062" +
    "\034\001\002\000\042\002\uffbd\004\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\024\uffbd\055\uffbd\062\uffbd\001\002" +
    "\000\030\010\055\035\043\052\053\057\052\060\056\061" +
    "\051\062\050\063\045\064\046\074\042\075\044\001\002" +
    "\000\010\027\124\030\125\053\u0110\001\002\000\004\047" +
    "\uffb0\001\002\000\030\002\uffe7\004\uffe7\010\uffe7\011\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\017\uffe7\022\uffe7\024\uffe7\062" +
    "\uffe7\001\002\000\030\002\uffec\004\uffec\010\uffec\011\uffec" +
    "\013\uffec\014\uffec\016\uffec\017\uffec\022\uffec\024\uffec\062" +
    "\uffec\001\002\000\030\010\055\035\043\052\053\057\052" +
    "\060\056\061\051\062\050\063\045\064\046\074\042\075" +
    "\044\001\002\000\010\027\124\030\125\053\u0115\001\002" +
    "\000\004\054\u0116\001\002\000\004\021\u0117\001\002\000" +
    "\026\010\055\052\053\057\052\060\056\061\051\062\050" +
    "\063\045\064\046\074\042\075\044\001\002\000\010\020" +
    "\u011b\021\u0117\055\uffb5\001\002\000\010\020\uffb7\021\uffb7" +
    "\055\uffb7\001\002\000\004\055\u011f\001\002\000\004\050" +
    "\u011d\001\002\000\010\020\uffb8\021\uffb8\055\uffb8\001\002" +
    "\000\030\004\030\010\026\011\017\012\210\014\013\015" +
    "\212\016\014\017\005\022\006\024\031\062\034\001\002" +
    "\000\032\004\030\010\026\011\017\012\210\014\013\015" +
    "\212\016\014\017\005\022\006\024\031\055\uffb6\062\034" +
    "\001\002\000\042\002\uffb9\004\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\024\uffb9\055\uffb9\062\uffb9\001\002\000" +
    "\024\036\070\037\066\040\060\041\071\042\075\043\063" +
    "\050\u0121\065\062\066\073\001\002\000\030\004\030\010" +
    "\026\011\017\012\210\014\013\015\212\016\014\017\005" +
    "\022\006\024\031\062\034\001\002\000\036\004\030\010" +
    "\026\011\017\012\210\014\013\015\212\016\014\017\005" +
    "\020\uffb4\021\uffb4\022\006\024\031\055\uffb4\062\034\001" +
    "\002\000\004\062\u0124\001\002\000\004\050\u0125\001\002" +
    "\000\026\010\055\052\053\057\052\060\056\061\051\062" +
    "\050\063\045\064\046\074\042\075\044\001\002\000\024" +
    "\036\070\037\066\040\060\041\071\042\075\043\063\047" +
    "\u0127\065\062\066\073\001\002\000\030\010\055\035\043" +
    "\052\053\057\052\060\056\061\051\062\050\063\045\064" +
    "\046\074\042\075\044\001\002\000\010\027\124\030\125" +
    "\047\u0129\001\002\000\006\065\u012c\066\u012a\001\002\000" +
    "\004\053\uffbb\001\002\000\004\053\u012d\001\002\000\004" +
    "\053\uffba\001\002\000\004\054\u012e\001\002\000\030\004" +
    "\030\010\026\011\017\012\210\014\013\015\212\016\014" +
    "\017\005\022\006\024\031\062\034\001\002\000\032\004" +
    "\030\010\026\011\017\012\210\014\013\015\212\016\014" +
    "\017\005\022\006\024\031\055\u0130\062\034\001\002\000" +
    "\042\002\uffbc\004\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\024\uffbc\055\uffbc\062\uffbc\001\002\000\030\002\ufff1" +
    "\004\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\016\ufff1\017" +
    "\ufff1\022\ufff1\024\ufff1\062\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\040\002\017\003\007\006\020\007\021\011" +
    "\023\014\011\015\015\021\003\022\006\026\026\030\010" +
    "\033\014\034\022\036\024\042\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\357\007\364\011\366\014\361\015\363\021\355\022\356" +
    "\026\370\030\360\033\362\034\365\036\367\042\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\037\001\001\000\002\001" +
    "\001\000\006\043\056\044\147\001\001\000\010\010\145" +
    "\043\056\044\116\001\001\000\002\001\001\000\006\043" +
    "\056\044\046\001\001\000\002\001\001\000\006\043\056" +
    "\044\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\056\044\127\001" +
    "\001\000\010\010\117\043\056\044\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\110\001\001\000\004\043\107\001\001\000\002\001\001" +
    "\000\004\043\106\001\001\000\004\043\105\001\001\000" +
    "\004\043\104\001\001\000\004\043\103\001\001\000\004" +
    "\043\102\001\001\000\004\043\101\001\001\000\004\043" +
    "\100\001\001\000\004\043\077\001\001\000\002\001\001" +
    "\000\004\043\076\001\001\000\004\043\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\056\044\122\001\001\000\002\001\001" +
    "\000\006\043\056\044\126\001\001\000\006\043\056\044" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\056\044\136\001\001\000\010\010\134\043\056\044\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\056\044\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\056" +
    "\044\156\001\001\000\002\001\001\000\010\021\164\040" +
    "\163\041\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\176\007\205\013\204\014\200\015\203\021\174" +
    "\022\175\026\213\030\177\031\212\032\201\033\202\034" +
    "\206\036\210\042\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\225\007\233\014\227\015\232\021\223\022" +
    "\224\026\237\030\226\031\240\032\230\033\231\034\235" +
    "\036\236\042\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\056\044\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\056\044\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\176\007\205\013\274\014\200\015\203\021\174\022" +
    "\175\026\213\030\177\031\212\032\201\033\202\034\206" +
    "\036\210\042\214\001\001\000\036\003\225\007\233\014" +
    "\227\015\232\021\223\022\224\026\237\030\226\031\240" +
    "\032\230\033\231\034\235\036\236\042\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\056\044\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\176\007\205\013\303\014\200\015\203\021\174\022\175" +
    "\026\213\030\177\031\212\032\201\033\202\034\206\036" +
    "\210\042\214\001\001\000\036\003\225\007\233\014\227" +
    "\015\232\021\223\022\224\026\237\030\226\031\240\032" +
    "\230\033\231\034\235\036\236\042\241\001\001\000\004" +
    "\016\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\176\007\205\013\310\014\200\015\203\021\174" +
    "\022\175\026\213\030\177\031\212\032\201\033\202\034" +
    "\206\036\210\042\214\001\001\000\036\003\225\007\233" +
    "\014\227\015\232\021\223\022\224\026\237\030\226\031" +
    "\240\032\230\033\231\034\235\036\236\042\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\056" +
    "\044\324\001\001\000\006\043\056\044\320\001\001\000" +
    "\002\001\001\000\010\010\322\043\056\044\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\056\044\333\001" +
    "\001\000\002\001\001\000\004\037\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\056\044\341\001\001\000\002\001\001\000\006\043\056" +
    "\044\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\056\044\346\001\001\000\002\001\001\000\010" +
    "\021\164\040\350\041\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\056\044\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\056\044\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\176" +
    "\007\205\013\u010b\014\200\015\203\021\174\022\175\026" +
    "\213\030\177\031\212\032\201\033\202\034\206\036\210" +
    "\042\214\001\001\000\036\003\225\007\233\014\227\015" +
    "\232\021\223\022\224\026\237\030\226\031\240\032\230" +
    "\033\231\034\235\036\236\042\241\001\001\000\002\001" +
    "\001\000\006\043\056\044\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\056\044\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\u0117\025\u0118\001\001\000\004\043" +
    "\u011f\001\001\000\006\023\u0119\025\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\176\007\205\013\u011d\014\200\015\203" +
    "\021\174\022\175\026\213\030\177\031\212\032\201\033" +
    "\202\034\206\036\210\042\214\001\001\000\036\003\225" +
    "\007\233\014\227\015\232\021\223\022\224\026\237\030" +
    "\226\031\240\032\230\033\231\034\235\036\236\042\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\176\007\205\013\u0121\014\200\015\203\021\174\022\175" +
    "\026\213\030\177\031\212\032\201\033\202\034\206\036" +
    "\210\042\214\001\001\000\036\003\225\007\233\014\227" +
    "\015\232\021\223\022\224\026\237\030\226\031\240\032" +
    "\230\033\231\034\235\036\236\042\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u0125\001\001\000" +
    "\002\001\001\000\006\043\056\044\u0127\001\001\000\002" +
    "\001\001\000\004\027\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\176\007\205\013\u012e\014\200\015\203\021\174\022" +
    "\175\026\213\030\177\031\212\032\201\033\202\034\206" +
    "\036\210\042\214\001\001\000\036\003\225\007\233\014" +
    "\227\015\232\021\223\022\224\026\237\030\226\031\240" +
    "\032\230\033\231\034\235\036\236\042\241\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

ListaErrores errores = ListaErrores.getListaerror();
/*public String resultado="";
public Hashtable<String,Simbolo> simbolos = new Hashtable<String,Simbolo>();

//public Hashtable<String,Simbolo_Ejemplo> simbolos;*/
public ArbolCSJ arbol = new ArbolCSJ();
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        errores.agregarerror(new ER((s.right+1),s.left, (String) s.value, 2, "Valor no conocido"));
}
             

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+"  Identificador " + s.value + " no reconocido.");
        errores.agregarerror(new ER((s.right+1),s.left, (String) s.value, 2, "Valor no conocido"));
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCJS$actions {
  private final SintacticoCJS parser;

  /** Constructor */
  CUP$SintacticoCJS$actions(SintacticoCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCJS$do_action(
    int                        CUP$SintacticoCJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCJS$parser,
    java.util.Stack            CUP$SintacticoCJS$stack,
    int                        CUP$SintacticoCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= aparen R cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
		RESULT=a;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s =new nodo("decimal", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s =new nodo("cadena", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s =new nodo("false", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= dateti 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s1 = new nodo("datetime",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s1.setHijos(hijos);
		RESULT = s1;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= date 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s1 = new nodo("date",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s1.setHijos(hijos);
		RESULT = s1;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
				
		nodo s =new nodo("true", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s =new nodo("num", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s =new nodo("iden", aleft, aright, false, a);    
    	ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
    
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= iden punto atexto aparen cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		
		nodo s = new nodo("atexto",aleft,aright,false,a);
		ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= iden punto rconteo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		
		nodo s = new nodo("conteo",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo> ();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= iden aparen LISTADATOS cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
		nodo s = new nodo("llamada",aleft,aright,false,null);
		nodo funcion = new nodo(a.toString(),aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add(funcion);
		if(b!=null){
			nodo s1 = new nodo("listadatos",bleft,bright,false,null);
			s1.setHijos((ArrayList<nodo>)b);
			hijos.add(s1);
		}
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= documento punto obtener aparen cadena cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
		nodo s = new nodo("documento",aleft,aright,false,null);
		nodo s1 = new nodo("obtener",aleft,aright,false,null); 
		ArrayList<nodo> hijos = new ArrayList<nodo>();

		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		s1.setHijos(hijos);

		hijos = new ArrayList<nodo>();
		hijos.add(s1);
		s.setHijos(hijos);

		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= iden allave R cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
		nodo s = new nodo("accesovector",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add(new nodo(a.toString(),aleft,aright,false,null));
		hijos.add((nodo)b);
		s.setHijos(hijos);
		RESULT= s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E decrementar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
		nodo s = new nodo("decrementar",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		s.setHijos(hijos);
		RESULT= s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E incrementar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
		nodo s = new nodo("incrementar",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		s.setHijos(hijos);
		RESULT= s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E mod E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("%",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E pot E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("^",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E por E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("*",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E div E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("/",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("-",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("+",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("E",33, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // R ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // R ::= E igualacion E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("==",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // R ::= E diferente E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("!=",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // R ::= E mayorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo(">=",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // R ::= E menorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("<=",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // R ::= E menor E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("<",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // R ::= E mayor E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo(">",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // R ::= not R 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)b);
		nodo s = new nodo("!",bleft,bright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // R ::= R or R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s= new nodo("||",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // R ::= R and R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		hijos.add((nodo)b);
		nodo s = new nodo("&&",aleft,aright,false,null);
		s.setHijos(hijos);
		RESULT = s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("R",34, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTADATOS ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LISTADATOS",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTADATOS ::= R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);
				RESULT=hijos;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LISTADATOS",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTADATOS ::= LISTADATOS coma R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
				ArrayList<nodo> hijos = (ArrayList<nodo>)a;
				hijos.add((nodo)b);
				RESULT=hijos;		
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LISTADATOS",6, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNACION ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION ::= allave R cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
				nodo s =new nodo("posicionvector",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);
				s.setHijos(hijos);
				RESULT= s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGNACION ::= dpuntos allave LISTADATOS cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
				nodo s = new nodo("listavector",aleft,aright,true,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				if(b!=null){
					nodo s1 = new nodo("listadatos",bleft,bright,false,null);
					s1.setHijos((ArrayList<nodo>)b);
					hijos.add(s1);
				}
				s.setHijos(hijos);
				RESULT= s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGNACION ::= dpuntos R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
				nodo s = new nodo("valor",aleft,aright,false,null);
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				hijos.add((nodo)a);
				s.setHijos(hijos);
				RESULT= s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECVAR ::= rdimv LID ASIGNACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s = new nodo("decvar",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo ides = new nodo("listaid",bleft,bright,false,b);
			ides.setHijos((ArrayList<nodo>)b);
			hijos.add(ides);
			if(c!=null){
				hijos.add((nodo)c);
			}
			s.setHijos(hijos);
			RESULT= s;		
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DECVAR",1, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LID ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add(new nodo(a.toString(),aleft,aright,false,a));
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LID",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LID ::= LID coma iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add(new nodo(b.toString(),bleft,bright,false,b));
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LID",13, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIG ::= allave R cllave dpuntos R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s =new nodo("posicionvector",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			nodo val = new nodo("valor",bleft,bright,false,null);
			hijos.add((nodo)b);
			val.setHijos(hijos);

			hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			hijos.add(val);
			s.setHijos(hijos);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIG ::= dpuntos allave LISTADATOS cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("listavector",aleft,aright,true,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			if(b!=null){
				nodo s1 = new nodo("listadatos",bleft,bright,false,null);
				s1.setHijos((ArrayList<nodo>)b);
				hijos.add(s1);
			}
			s.setHijos(hijos);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIG ::= dpuntos R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s = new nodo("valor",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT= s;						
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGVALOR ::= iden ASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s = new nodo("asignar",aleft,aright,false,null);
			ArrayList<nodo>hijos = new ArrayList<nodo>();
			hijos.add(new nodo(a.toString(),aleft,aright,false,null));
			hijos.add((nodo)b);
			s.setHijos(hijos);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ASIGVALOR",5, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LPARAM ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LPARAM",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LPARAM ::= iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			ArrayList<nodo> ides = new ArrayList<nodo>();			
			nodo ide =new nodo("id",aleft,aright,false,null); 
			ides.add(new nodo(a.toString(),aleft,aright,false,null));
			ide.setHijos(ides);
			hijos.add(ide);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LPARAM",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LPARAM ::= LPARAM coma iden 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			ArrayList<nodo> ides = new ArrayList<nodo>();
			nodo ide =new nodo("id",bleft,bright,false,b); 
			ides.add(new nodo(b.toString(),bleft,bright,false,null));
			ide.setHijos(ides);
			hijos.add(ide);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LPARAM",8, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCION ::= funcion aparen LPARAM cparen allave LINSTRU cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("funcionanidada",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			if(b!=null){
				nodo param = new nodo("listaparam",bleft,bright,false,null);
				param.setHijos((ArrayList<nodo>)b);
				hijos.add(param);
			}
			nodo instr = new nodo("listainstrucciones",cleft,cright,false,null);
			instr.setHijos((ArrayList<nodo>)c);
			hijos.add(instr);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FUNCION",31, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // METODO ::= funcion iden aparen LPARAM cparen allave LINSTRU cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("metodo",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add(new nodo(a.toString(),aleft,aright,false,null));
			if(b!=null){
				nodo param = new nodo("listaparam",bleft,bright,false,null);
				param.setHijos((ArrayList<nodo>)b);
				hijos.add(param);
			}
			nodo instr = new nodo("listainstrucciones",cleft,cright,false,null);
			instr.setHijos((ArrayList<nodo>)c);
			hijos.add(instr);
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("METODO",7, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IMPRE ::= imprimir aparen R cparen 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("imprimir",bleft,bright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			s.setHijos(hijos);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IMPRE",10, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELIF ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ELIF",12, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELIF ::= sino allave LINSTRU cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("sino",aleft,aright,false,null);
			nodo instr = new nodo("listainstrucciones",bleft,bright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			instr.setHijos((ArrayList<nodo>)b);
			hijos.add(instr);
			s.setHijos(hijos);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("ELIF",12, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= si aparen R cparen allave LINSTRU cllave ELIF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s = new nodo("if",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			
			nodo cond = new nodo("cond",bleft,bright,false,null);
			hijos.add((nodo)b);
			cond.setHijos(hijos);

			hijos = new ArrayList<nodo>();
			hijos.add(cond);

			nodo instr = new nodo("listainstrucciones",bleft,bright,false,null);
			instr.setHijos((ArrayList<nodo>)c);
			hijos.add(instr);
			if(d!=null){
				hijos.add((nodo)d);
			}
			s.setHijos(hijos);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASO ::= caso E dpuntos LINSTRU 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s = new nodo("caso",aleft,aright,false,null);
		nodo s1 = new nodo("valor",aleft,aright,false,null);
		
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		hijos.add((nodo)a);
		s1.setHijos(hijos);
		hijos = new ArrayList<nodo>();
		hijos.add(s1);
		nodo instr = new nodo("listainstrucciones",bleft,bright,false,null);
		instr.setHijos((ArrayList<nodo>)b);
		hijos.add(instr);

		s.setHijos(hijos);		

		RESULT= s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("CASO",19, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEF ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DEF",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DEF ::= defecto dpuntos LINSTRU 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
		nodo s = new nodo("defecto",aleft,aright,false,null);
		ArrayList<nodo> hijos = new ArrayList<nodo>();
		nodo instr = new nodo("listainstrucciones",bleft,bright,false,null);
		instr.setHijos((ArrayList<nodo>)b);
		hijos.add(instr);
		s.setHijos(hijos);
		RESULT= s;
	
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DEF",17, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LCASOS ::= CASO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LCASOS",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LCASOS ::= LCASOS CASO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LCASOS",18, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SELECT ::= selecciona aparen R cparen allave LCASOS DEF cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("select",aleft,aright,false,null);
			nodo s1 = new nodo("valor",aleft,aright,false,null);
			nodo casos = new nodo("lcasos",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();

			hijos.add((nodo)a);
			s1.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			casos.setHijos((ArrayList<nodo>)b);

			hijos.add(s1);
			hijos.add(casos);
			if(c!=null){hijos.add((nodo)c);}

			s.setHijos(hijos);

			RESULT = s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SELECT",16, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPEFOR ::= incrementar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			RESULT= new nodo("++",aleft,aleft,false,null);
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPEFOR",21, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPEFOR ::= decrementar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			RESULT= new nodo("--",aleft,aleft,false,null);
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OPEFOR",21, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR ::= para aparen iden dpuntos E pcoma R pcoma OPEFOR cparen allave LINSTRU cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("for",aleft,aright,false,null);
			nodo expr = new nodo("valor",aleft,aright,false,a);
			nodo cond = new nodo("cond",aleft,aright,false,null);
			nodo aumento = new nodo("operacion",dleft, dright, false,null);
			nodo instr = new nodo("listainstrucciones",bleft,bright,false,null);
			instr.setHijos((ArrayList<nodo>)e);
			
			ArrayList<nodo> hijos = new ArrayList<nodo>();

			hijos.add(new nodo(a.toString(),aleft,aright,false,null));
			hijos.add((nodo)b);
			expr.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			hijos.add((nodo)c);
			cond.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			hijos.add((nodo)d);
			aumento.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			hijos.add(expr);
			hijos.add(cond);
			hijos.add(aumento);
			hijos.add(instr);
			s.setHijos(hijos);

			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= mientras aparen R cparen allave LINSTRU cllave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("while",aleft,aright,false,null);
			nodo cond = new nodo("cond",aleft,aright,false,null);
			nodo instr = new nodo("listainstrucciones",bleft,bright,false,null);
			instr.setHijos((ArrayList<nodo>)b);
			ArrayList<nodo> hijos = new ArrayList<nodo>();

			hijos.add((nodo)a);
			cond.setHijos(hijos);
			hijos = new ArrayList<nodo>();

			hijos.add(cond);
			hijos.add(instr);
			s.setHijos(hijos);

			RESULT = s;

		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DETENER ::= detener 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		RESULT= new nodo("detener",aleft,aright,false,null);
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DETENER",23, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETORNO ::= retornar R 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s = new nodo("retorno",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);

			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("RETORNO",24, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MSG ::= mensaje aparen R cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("mensaje",aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);

			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("MSG",25, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SETTEAR ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SETTEAR",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SETTEAR ::= punto setelemento aparen R coma R cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
				ArrayList<nodo> hijos = new ArrayList<nodo>();
				nodo s = new nodo("setelemento",aleft,aright,false,null);
				nodo valor = new nodo("objeto",bleft,bright,false,null);
				nodo nuevo_valor = new nodo("nuevo_valor",cleft,cright,false,null);

				hijos.add((nodo)b);
				valor.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add((nodo)c);
				nuevo_valor.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(valor);
				hijos.add(nuevo_valor);
				s.setHijos(hijos);

				RESULT=s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SETTEAR",29, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OBSERVADOR ::= FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",30, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OBSERVADOR ::= LLAMADA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		RESULT=b;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",30, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REFERENCIA ::= iden punto observador aparen R coma OBSERVADOR cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
				nodo s = new nodo("observador_id",aleft,aright,false,null);
				nodo elemento = new nodo("elemento",aleft,aright,false,a);
				nodo evento = new nodo("evento",bleft,bright,false,b);
				ArrayList<nodo> hijos = new ArrayList<nodo>();

				hijos.add(new nodo(a.toString(),aleft,aright,false,null));
				elemento.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add((nodo)b);
				evento.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(elemento);
				hijos.add(evento);
				hijos.add((nodo)c);
				s.setHijos(hijos);

				RESULT= s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("REFERENCIA",32, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DOCUMENTO ::= documento punto obtener aparen R cparen SETTEAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
				nodo s = new nodo("obtener_doc",aleft,aright,false,null);
				nodo evento = new nodo("objeto",bleft,bright,false,b);
				ArrayList<nodo> hijos = new ArrayList<nodo>();

				hijos.add((nodo)b);
				evento.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(evento);
				if(c!=null){
					hijos.add((nodo)c);
				}
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DOCUMENTO ::= documento punto observador aparen R coma OBSERVADOR cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
				nodo s = new nodo("observador_doc",aleft,aright,false,null);
				nodo evento = new nodo("evento",bleft,bright,false,b);
				ArrayList<nodo> hijos = new ArrayList<nodo>();

				hijos.add((nodo)b);
				evento.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(evento);
				if(c!=null){
					hijos.add((nodo)c);
				}
				s.setHijos(hijos);
				RESULT = s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",26, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SETELEMENT ::= iden punto setelemento aparen cadena coma R cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
				nodo s = new nodo("setelemento",aleft,aright,false,a);
				nodo valor = new nodo("objeto",bleft,bright,false,b);
				nodo valviejo  = new nodo("valor",bleft,bright,false,b);
				nodo nuevo_valor = new nodo("nuevo_valor",cleft,cright,false,c);
				ArrayList<nodo> hijos = new ArrayList<nodo>();

				hijos.add(new nodo(a.toString(),aleft,aright,false,null));
				valor.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(new nodo(b.toString(),bleft,bright,false,null));
				valviejo.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add((nodo)c);
				nuevo_valor.setHijos(hijos);
				hijos = new ArrayList<nodo>();

				hijos.add(valor);
				hijos.add(valviejo);
				hijos.add(nuevo_valor);
				s.setHijos(hijos);

				RESULT= s;
			
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("SETELEMENT",28, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LINSTRU ::= IMPRE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LINSTRU ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LINSTRU ::= SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LINSTRU ::= FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LINSTRU ::= ASIGVALOR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LINSTRU ::= DECVAR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LINSTRU ::= WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LINSTRU ::= DETENER pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LINSTRU ::= RETORNO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LINSTRU ::= MSG pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LINSTRU ::= DOCUMENTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LINSTRU ::= SETELEMENT pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LINSTRU ::= LLAMADA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LINSTRU ::= REFERENCIA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LINSTRU ::= LINSTRU REFERENCIA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LINSTRU ::= LINSTRU LLAMADA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINSTRU ::= LINSTRU MSG pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINSTRU ::= LINSTRU SETELEMENT pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINSTRU ::= LINSTRU DOCUMENTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINSTRU ::= LINSTRU RETORNO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINSTRU ::= LINSTRU DETENER pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINSTRU ::= LINSTRU WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LINSTRU ::= LINSTRU ASIGVALOR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LINSTRU ::= LINSTRU DECVAR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LINSTRU ::= LINSTRU FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LINSTRU ::= LINSTRU SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LINSTRU ::= LINSTRU IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LINSTRU ::= LINSTRU IMPRE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRU",9, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADA ::= iden aparen LISTADATOS cparen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			nodo s = new nodo("llamada",aleft,aright,false,null);
			nodo funcion = new nodo(a.toString(),aleft,aright,false,null);
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add(funcion);
			if(b!=null){
				nodo s1 = new nodo("listadatos",bleft,bright,false,null);
				s1.setHijos((ArrayList<nodo>)b);
				hijos.add(s1);
			}
			s.setHijos(hijos);
			RESULT = s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",15, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LINSTRUCCIONES ::= METODO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LINSTRUCCIONES ::= IMPRE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LINSTRUCCIONES ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINSTRUCCIONES ::= SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LINSTRUCCIONES ::= FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINSTRUCCIONES ::= ASIGVALOR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINSTRUCCIONES ::= DECVAR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINSTRUCCIONES ::= WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINSTRUCCIONES ::= MSG pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINSTRUCCIONES ::= DOCUMENTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINSTRUCCIONES ::= SETELEMENT pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINSTRUCCIONES ::= LLAMADA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINSTRUCCIONES ::= REFERENCIA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = new ArrayList<nodo>();
			hijos.add((nodo)a);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINSTRUCCIONES ::= LINSTRUCCIONES REFERENCIA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINSTRUCCIONES ::= LINSTRUCCIONES METODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINSTRUCCIONES ::= LINSTRUCCIONES LLAMADA pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINSTRUCCIONES ::= LINSTRUCCIONES MSG pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINSTRUCCIONES ::= LINSTRUCCIONES SETELEMENT pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINSTRUCCIONES ::= LINSTRUCCIONES DOCUMENTO pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINSTRUCCIONES ::= LINSTRUCCIONES WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINSTRUCCIONES ::= LINSTRUCCIONES ASIGVALOR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINSTRUCCIONES ::= LINSTRUCCIONES DECVAR pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINSTRUCCIONES ::= LINSTRUCCIONES FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINSTRUCCIONES ::= LINSTRUCCIONES SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINSTRUCCIONES ::= LINSTRUCCIONES IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINSTRUCCIONES ::= LINSTRUCCIONES IMPRE pcoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		
			ArrayList<nodo> hijos = (ArrayList<nodo>)a;
			hijos.add((nodo)b);
			RESULT=hijos;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("LINSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LINSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.peek()).value;
		
			nodo s = parser.arbol.getRaiz();
			s.setHijos((ArrayList<nodo>)a);
			RESULT= s;
		
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.elementAt(CUP$SintacticoCJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCJS$parser.done_parsing();
          return CUP$SintacticoCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

